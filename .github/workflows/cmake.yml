name: Linux Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - {"os": ubuntu-latest, short: linux, compiler: gcc, shell: bash}
          - {"os": ubuntu-latest, short: linux, compiler: clang, shell: bash}

    runs-on: ${{matrix.os}}

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    defaults:
      run:
        shell: '${{ matrix.shell }} {0}'

    steps:
      - uses: actions/checkout@v4

      - name: Common Setup
        uses: ./.github/actions/linux-setup
        with:
          compiler: ${{matrix.compiler}}

      - name: Configure CMake
        run: cmake --preset ${{matrix.short}}-${{matrix.compiler}}-release

      - name: Run Codechecker
        if: matrix.compiler == 'clang'
        uses: whisperity/codechecker-analysis-action@v1
        id: codechecker
        with:
          logfile: /home/runner/work/ffmpeg_wrapper/ffmpeg_wrapper/out/build/Clang/Release/compile_commands.json

      - name: Upload codechecker analysis
        if: matrix.compiler == 'clang'
        uses: actions/upload-artifact@v4
        with:
          name: "CodeChecker Bug Reports"
          path: ${{ steps.codechecker.outputs.result-html-dir }}

      - name: Build
        run: cmake --build --preset ${{matrix.short}}-${{matrix.compiler}}-release

      - name: Test
        id: test
        continue-on-error: true
        run: |
          ctest --verbose -LE "GPU_TEST" --preset ${{matrix.short}}-${{matrix.compiler}}-release -C ${{matrix.short}}-${{matrix.compiler}}-release
          echo "::set-output name=RESULT::$?"
        working-directory: ${{ github.workspace }}

      - name: Install
        id: install
        continue-on-error: true
        run: |
          cmake --build --preset ${{matrix.short}}-${{matrix.compiler}}-release --target install
          echo "::set-output name=RESULT::$?"

      - name: Report Install Result
        run: echo "Install step finished with exit code ${{ steps.install.outputs.RESULT }}"

      - name: Report Test Result
        run: echo "Test step finished with exit code ${{ steps.test.outputs.RESULT }}"